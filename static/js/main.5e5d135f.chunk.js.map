{"version":3,"sources":["components/MovieContext.js","components/NavBar.js","components/Movie.js","components/Movies.js","components/AddMovie.js","components/MovieMain.js","App.js","serviceWorker.js","index.js"],"names":["MovieContext","createContext","MovieProvider","props","_useState","useState","id","name","price","_useState2","Object","slicedToArray","movies","setMovies","react_default","a","createElement","Provider","value","children","NavBar","_useContext","useContext","Fragment","length","Movie","_ref","movie","Movies","map","components_Movie","key","AddMovie","setName","_useState3","_useState4","setPrice","_useContext2","type","onChange","event","target","onClick","preventDefault","prevMovies","concat","toConsumableArray","Math","random","MovieMain","components_MovieContext","components_NavBar","components_AddMovie","components_Movies","App","components_MovieMain","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5e5d135f.chunk.js","sourcesContent":["import React, { createContext, useState } from \"react\";\n\nexport const MovieContext = createContext();\n\nconst MovieProvider = props => {\n  const [movies, setMovies] = useState([\n    { id: 1, name: \"Thenali\", price: \"10$\" },\n    { id: 2, name: \"Thevar Magan\", price: \"15$\" },\n    { id: 3, name: \"Nayagan\", price: \"20$\" }\n  ]);\n\n  return (\n    <MovieContext.Provider value={[movies, setMovies]}>\n      {props.children}\n    </MovieContext.Provider>\n  );\n};\n\nexport default MovieProvider;\n","import React, { useContext } from \"react\";\nimport { MovieContext } from \"./MovieContext\";\n\nconst NavBar = () => {\n  const [movies] = useContext(MovieContext);\n  return (\n    <>\n      <span>The number of movies in shelf : {movies.length}</span>\n      <br />\n      <br />\n    </>\n  );\n};\n\nexport default NavBar;\n","import React from \"react\";\n\nconst Movie = ({ movie }) => {\n  return (\n    <>\n      <span> {movie.name}</span> <span>{movie.price}</span>\n      <br />\n    </>\n  );\n};\n\nexport default Movie;\n","import React, { useContext } from \"react\";\nimport Movie from \"./Movie\";\nimport { MovieContext } from \"./MovieContext\";\n\nconst Movies = props => {\n  const [movies] = useContext(MovieContext);\n  return (\n    <>\n      {movies.map(movie => {\n        return <Movie key={movie.id} movie={movie} />;\n      })}\n    </>\n  );\n};\n\nexport default Movies;\n","import React, { useState, useContext } from \"react\";\nimport { MovieContext } from \"./MovieContext\";\n\nconst AddMovie = () => {\n  const [name, setName] = useState(\"\");\n  const [price, setPrice] = useState(\"\");\n  const [movies, setMovies] = useContext(MovieContext);\n\n  const addName = event => {\n    setName(event.target.value);\n  };\n\n  const addPrice = event => {\n    setPrice(event.target.value);\n  };\n\n  const addMovie = event => {\n    event.preventDefault();\n    setMovies(prevMovies => [\n      ...prevMovies,\n      { name: name, price: price, id: Math.random() }\n    ]);\n  };\n\n  return (\n    <>\n      <label>Movie Name:</label>\n      <input type=\"text\" name=\"movie\" onChange={addName} />\n      <br />\n      <label> Price:</label>\n      <input type=\"text\" name=\"price\" onChange={addPrice} />\n      <br />\n      <button value=\"Add Movie\" onClick={addMovie}>\n        Add Movie\n      </button>\n      <br />\n      <br />\n    </>\n  );\n};\n\nexport default AddMovie;\n","import React from \"react\";\nimport NavBar from \"./NavBar\";\nimport Movies from \"./Movies\";\nimport MovieProvider from \"./MovieContext\";\nimport AddMovie from \"./AddMovie\";\n\nconst MovieMain = () => {\n  return (\n    <>\n      <MovieProvider>\n        <NavBar />\n        <AddMovie />\n        <Movies />\n      </MovieProvider>\n    </>\n  );\n};\n\nexport default MovieMain;\n","import React from \"react\";\nimport \"./App.css\";\nimport MovieMain from \"./components/MovieMain\";\n\nconst App = () => {\n  return (\n    <div>\n      <MovieMain />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}